syntax = "proto2";

// TODO: We're using proto2 because it's the default on Ubuntu 16.04.
// At some point we will want to migrate to proto3, but we are not
// using any proto3 features yet.

package tapdance;

enum KeyType {
    AES_GCM_128 = 90;
    AES_GCM_256 = 91; // not supported atm
}

message PubKey {
    // A public key, as used by the station.
    optional bytes key = 1;

    optional KeyType type = 2;
}

message TLSDecoySpec {
    // The hostname/SNI to use for this host
    //
    // The hostname is the only required field, although other
    // fields are expected to be present in most cases.
    optional string hostname = 1;

    // The 32-bit ipv4 address, in network byte order
    //
    // If the IPv4 address is absent, then it may be resolved via
    // DNS by the client, or the client may discard this decoy spec
    // if local DNS is untrusted, or the service may be multihomed.
    optional fixed32 ipv4addr = 2;

    // The Tapdance station public key to use when contacting this
    // decoy
    //
    // If omitted, the default station public key (if any) is used.
    optional PubKey pubkey = 3;

    // The maximum duration, in milliseconds, to maintain an open
    // connection to this decoy (because the decoy may close the
    // connection itself after this length of time)
    //
    // If omitted, a default of 30,000 milliseconds is assumed.
    optional uint32 timeout = 4;

    // The maximum TCP window size to attempt to use for this decoy.
    //
    // If omitted, a default of 15360 is assumed.
    //
    // TODO: the default is based on the current heuristic of only
    // using decoys that permit windows of 15KB or larger.  If this
    // heuristic changes, then this default doesn't make sense.
    optional uint32 tcpwin = 5;
}

// In version 1, the request is very simple: when
// the client sends a MSG_PROTO to the station, if the
// generation number is present, then this request includes
// (in addition to whatever other operations are part of the
// request) a request for the station to send a copy of
// the current decoy set that has a generation number greater
// than the generation number in its request.
//
// If the response contains a DecoyListUpdate with a generation number equal
// to that which the client sent, then the client is "caught up" with
// the station and the response contains no new information
// (and all other fields may be omitted or empty).  Otherwise,
// the station will send the latest configuration information,
// along with its generation number.
//
// The station can also send ClientConf messages
// (as part of Station2Client messages) whenever it wants.
// The client is expected to react as if it had requested
// such messages -- possibly by ignoring them, if the client
// is already up-to-date according to the generation number.

message ClientConf {
    optional DecoyList decoy_list = 1;
    optional uint32 generation = 2;
    optional PubKey default_pubkey = 3;
}

message DecoyList {
    repeated TLSDecoySpec tls_decoys = 1;
}

// State transitions of the client
enum C2S_Transition {
    C2S_NO_CHANGE = 0;
    // C2S_SESSION_INIT = 1; // Currently MSG_INIT is NOT protobuf
    C2S_EXPECT_RECONNECT = 2;
    C2S_SESSION_CLOSE = 3;
    C2S_YIELD_UPLOAD = 4;
    C2S_ACQUIRE_UPLOAD = 5;
    C2S_EXPECT_UPLOADONLY_RECONN = 6;
    C2S_ERROR = 255;
}

// State transitions of the server
enum S2C_Transition {
    S2C_NO_CHANGE = 0;
    S2C_SESSION_INIT = 1;
    S2C_CONFIRM_RECONNECT = 2;
    S2C_SESSION_CLOSE = 3;
    // TODO should probably also allow EXPECT_RECONNECT here, for DittoTap

    S2C_ERROR = 255;
}

// Should accompany all S2C_ERROR messages.
enum ErrorReasonS2C {
    NO_ERROR = 0;
    COVERT_STREAM = 1; // Squid TCP connection broke
    CLIENT_REPORTED = 2; // You told me something was wrong, client
    CLIENT_PROTOCOL = 3; // You messed up, client (e.g. sent a bad protobuf)
    STATION_INTERNAL = 4; // I broke
    DECOY_OVERLOAD = 5; // Everything's fine, but don't use this decoy right now

    CLIENT_STREAM = 100; // My stream to you broke. (This is impossible to send)
    CLIENT_TIMEOUT = 101; // You never came back. (This is impossible to send)
}

message StationToClient {
    // Should accompany (at least) SESSION_INIT and CONFIRM_RECONNECT.
    optional uint32 protocol_version = 1;

    // There might be a state transition. May be absent; absence should be
    // treated identically to NO_CHANGE.
    optional S2C_Transition state_transition = 2;

    // The station can send client config info piggybacked
    // on any message, as it sees fit
    optional ClientConf config_info = 3;

    // If state_transition == S2C_ERROR, this field is the explanation.
    optional ErrorReasonS2C err_reason = 4;

    // Signals client to stop connecting for following amount of seconds
    optional uint32 tmp_backoff = 5;

    optional bytes nonleaf_contents = 15;
	optional bool  nonleaf_complete = 16;
	optional bool  leaf_complete    = 17;
    // TODO: implement this, or remove this placeholder
    // Specifies what type of lossless compression was used. None if field is
    // not filled. The lossy compression is left implicit.
    // optional CompressionType compressed_with = 16;

    // Random-sized junk to defeat packet size fingerprinting.
    optional bytes padding = 100;
}

message ClientToStation {
    optional uint32 protocol_version = 1;

    // The client reports its decoy list's version number here, which the
    // station can use to decide whether to send an updated one. The station
    // should always send a list if this field is set to 0.
    optional uint32 decoy_list_generation = 2;

    optional C2S_Transition state_transition = 3;

    // The position in the overall session's upload sequence where the current
    // YIELD=>ACQUIRE switchover is happening.
    optional uint64 upload_sync = 4;

    // 
    repeated string failed_decoys = 10;

    // Random-sized junk to defeat packet size fingerprinting.
    optional bytes padding = 100;

    // (DittoTap-only)
    // Item(s) the station should add to its to-dup-overt-download queue. These
    // are assumed to be to the same decoy webserver as this session started on,
    // so rather than full URL, it should just be the path:
    // "/foo.html" instead of "https://a.b.com/foo.html", or
    // "/bar.png"  instead of "https://a.b.com/bar.png"
    repeated DupOvUrl overt_url = 101;

    // (DittoTap-only)
    // The HTTP Host field to use. The client only needs to specify this once,
    // at the beginning. (If we start getting the initial nonleaf URL from the
    // incomplete HTTP request, we can get this from there and drop this field).
    optional string overt_host = 102;
}

message DupOvUrl {
    optional string overt_url = 1;
    optional bool is_leaf = 2;
	optional string overt_headers = 3;
	// expected to be HPACKed
	optional bytes  overt_headers_packed = 4;
}
